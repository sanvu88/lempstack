#!/bin/bash

######################################################################
#           Auto Install & Optimize LEMP Stack on CentOS 7, 8        #
#                                                                    #
#                Author: Sanvv - HOSTVN Technical                    #
#                  Website: https://hostvn.vn                        #
#                                                                    #
#              Please do not remove copyright. Thank!                #
#  Please do not copy under any circumstance for commercial reason!  #
######################################################################

# shellcheck disable=SC2154
# shellcheck disable=SC2034
source /var/hostvn/menu/helpers/function

printf "%s===================%s\n" "${GREEN}" "${NC}"
printf "%sCai dat SSL tra phi%s\n" "${GREEN}" "${NC}"
printf "%s===================%s\n" "${GREEN}" "${NC}"
echo

set_variable(){
    #https://www.howtoforge.com/tutorial/linux-grep-command/
    #https://stackoverflow.com/a/6284370
    username=$(grep -w "username" "${USER_DIR}/.${domain}.conf" | cut -f2 -d'=')
    plugin_cache="$(grep -w "plugin_cache" "${USER_DIR}/.${domain}.conf" | cut -f2 -d'=')"
    php_mode="$(grep "php_mode" "${USER_DIR}/.${domain}.conf" | cut -f2 -d'=')"
    rewrite="include /etc/nginx/rewrite/${SOURCE}.conf;"
    cache="include /etc/nginx/extra/staticfiles.conf;"
    include_seo=""
    wp_secure=""
    brute=""
}

check_plugins_cache(){
    wp_secure="include /etc/nginx/wordpress/wordpress_secure.conf;"
    xmlrpc="include /etc/nginx/wordpress/disable_xmlrpc.conf;"

    if [[ -d "/home/${username}/${domain}/public_html/wp-content/plugins/w3-total-cache" ]]; then
        cache="include /etc/nginx/wordpress/w3c.conf;"
        plugin_cache="w3c"
    elif [[ -d "/home/${username}/${domain}/public_html/wp-content/plugins/wp-fastest-cache" ]]; then
        rewrite=""
        cache="include /etc/nginx/wordpress/wpfc.conf;"
        plugin_cache="wpfc"
    elif [[ -d "/home/${username}/${domain}/public_html/wp-content/plugins/wp-rocket" ]]; then
        cache="include /etc/nginx/rocket-nginx/default.conf;"
        plugin_cache="wprocket"
        if [[ "${plugins_cache}" == "wprocket" && ! -d "/etc/nginx/rocket-nginx" ]]; then
            cd_dir /etc/nginx
            git clone https://github.com/satellitewp/rocket-nginx.git
            cd_dir /etc/nginx/rocket-nginx
            cp rocket-nginx.ini.disabled rocket-nginx.ini
            php rocket-parser.php
        fi

        if [[ "${plugins_cache}" == "wprocket" && ! -f "/etc/nginx/rocket-nginx/default.conf" ]]; then
            cd_dir /etc/nginx/rocket-nginx
            php rocket-parser.php
        fi
        if [[ ! -f "${WORDPRESS_CRON_DIR}/${domain}" ]]; then
            touch "${WORDPRESS_CRON_DIR}"/"${domain}"
        fi
        string=$(grep -rnw "/home/${username}/${domain}/public_html/wp-config.php" -e "DISABLE_WP_CRON")
        if [ -z "${string}" ]; then
            sed -i "/WP_DEBUG/a define('DISABLE_WP_CRON', true);" /home/"${username}"/"${domain}"/public_html/wp-config.php
        fi
        cron_exists=$(crontab -l | grep -w 'wpcron.sh')
        if [ -z "${cron_exists}" ]; then
            crontab -l > wpcron
            echo "* * * * * /var/hostvn/menu/cronjob/wpcron.sh >/dev/null 2>&1" >> wpcron
            crontab wpcron
            rm -rf wpcron
        fi
    elif [[ -d "/home/${username}/${domain}/public_html/wp-content/plugins/wp-super-cache" ]]; then
        rewrite=""
        cache="include /etc/nginx/wordpress/wpsc.conf;"
        plugin_cache="wpsc"
    elif [[ -d "/home/${username}/${domain}/public_html/wp-content/plugins/cache-enabler" ]]; then
        rewrite=""
        cache="include /etc/nginx/wordpress/enabler.conf;"
        plugin_cache="enabler"
    elif [[ -d "/home/${username}/${domain}/public_html/wp-content/plugins/swift-performance-lite" ]]; then
        plugin_cache="swift1"
    else
        plugin_cache="other"
    fi

    sed -i '/plugin_cache=/d' "${USER_DIR}"/."${domain}".conf
    echo "plugin_cache=${plugin_cache}" >> "${USER_DIR}"/."${domain}".conf
}

backup_vhost(){
    if [[ -f "/etc/nginx/backup_vhost/${domain}.conf.orig" ]]; then
        rm -rf /etc/nginx/backup_vhost/"${domain}".conf.orig
    fi

    mv "/etc/nginx/conf.d/$domain.conf" "/etc/nginx/backup_vhost/${domain}.conf.orig"
}

remove_letencrypt(){
    if [ -f "/etc/letsencrypt/live/${domain}/cert.pem" ]; then
        certbot-auto revoke --cert-path /etc/letsencrypt/live/"${domain}"/cert.pem
        certbot-auto delete --cert-name "${domain}"
    fi
}

create_crt(){
    echo "Dien ma CRT va ma CA vao file."
    echo "De luu file hay bam CTRL + X va nhan ENTER sau đo bam tiep CTRL + O"
    echo "Dang mo trinh soan thao ...."
    sleep 3
    if [[ ! -d "/etc/nginx/ssl/${domain}" ]]; then
        mkdir -p /etc/nginx/ssl/"${domain}"
    fi
    nano /etc/nginx/ssl/"${domain}"/fullchain.pem
}

create_private_key(){
    echo "De lưu file hay bam CTRL + X va nhan ENTER sau đo bam tiep CTRL + O"
    echo "Dang mo trinh soan thao ...."
    sleep 3
    if [[ ! -d "/etc/nginx/ssl/${domain}" ]]; then
        mkdir -p /etc/nginx/ssl/"${domain}"
    fi
    nano /etc/nginx/ssl/"${domain}"/privkey.pem
}

create_ssl_vhost(){
    backup_vhost
    set_rewrite
    fastcgi
    doc_root "${SOURCE}" "${username}" "${domain}"

    if [[ "${SOURCE}" == "wordpress" ]]; then
        check_plugins_cache
        brute_force_wp "${username}"

        if [[ "${plugins_seo}" == "yoast_seo" ]]; then
            include_seo="include /etc/nginx/wordpress/yoast_seo.conf;"
            sed -i '/plugins_seo=/d' "${USER_DIR}"/."${domain}".conf
            echo "plugins_seo=yoast_seo" >> "${USER_DIR}"/."${domain}".conf
        elif [[ "${plugins_seo}" == "rank_math_seo" ]]; then
            include_seo="include /etc/nginx/wordpress/rank_math_seo.conf;"
            sed -i '/plugins_seo=/d' "${USER_DIR}"/."${domain}".conf
            echo "plugins_seo=rank_math_seo" >> "${USER_DIR}"/."${domain}".conf
        else
            sed -i '/plugins_seo=/d' "${USER_DIR}"/."${domain}".conf
            echo "plugins_seo=" >> "${USER_DIR}"/."${domain}".conf
        fi
    fi

    cat >> "${VHOST_DIR}/${domain}.conf" << END
upstream php-${username} {
    server ${fastcgi_pass}
}

server {
    listen 80;
    #listen [::]:80;
    server_name ${domain} www.${domain};

    ${root}
    if (\$http_x_forwarded_proto != 'https') {
        return 301 https://\$host\$request_uri;
    }
}

server {
    listen 443 ssl http2;
    server_name www.${domain};
    return 301 https://${domain}$request_uri;
	ssl_certificate         /etc/nginx/ssl/${domain}/fullchain.pem;
    ssl_certificate_key     /etc/nginx/ssl/${domain}/privkey.pem;
}

server {
    listen 443 ssl http2;
    server_name ${domain};

    access_log off;
    #access_log /home/${username}/${domain}/logs/access.log;
    log_not_found off;
    #error_log off;
    error_log /home/${username}/${domain}/logs/error.log;

    ${root}
    index index.php index.html index.htm;

    ${rewrite}
    ${cache}

    ssl_certificate         /etc/nginx/ssl/${domain}/fullchain.pem;
    ssl_certificate_key     /etc/nginx/ssl/${domain}/privkey.pem;

    location ~ \.php\$
    {
        try_files \$uri =404;
        fastcgi_split_path_info ^(.+\.php)(/.+)\$;
        fastcgi_index index.php;
        include /etc/nginx/fastcgi_params;
        include /etc/nginx/extra/nginx_limits.conf;
        fastcgi_param SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
        if (-f \$request_filename)
        {
            fastcgi_pass php-${username};
        }
    }

    ${brute}
    ${wp_secure}
    ${include_seo}
    ${xmlrpc}
    include /etc/nginx/extra/security.conf;
}
END
}

restart_nginx(){
    systemctl restart nginx.service
}

_run(){
    check_nginx_status

    if [ -z "${ALERT}" ]; then
        select_source
        set_variable

        if [ "${SOURCE}" == "wordpress" ]; then
            select_plugin_seo
        fi

        remove_letencrypt
        create_crt
        create_private_key
        create_ssl_vhost
        restart_nginx
        clear
        printf "%sCau hinh SSL thanh cong.%s\n" "${GREEN}" "${NC}"
    else
        clear
        printf "%s\n" "${ALERT}"
    fi
}

ALERT=""
domain=""
select_domain

if [ -n "${domain}" ]; then
    _run
else
    clear
    printf "%s\n" "${RED}Ban da chon huy thao tac${NC}"
fi

menu_sslpaid